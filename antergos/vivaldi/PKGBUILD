# Maintainer: Antergos Developers <dev@antergos.com>
# Contributor: BlackIkeEagle <ike DOT devolder AT gmail DOT com>
# Contributor: TZ86

pkgname=vivaldi
pkgver=1.13.1008.34
# https://update.vivaldi.com/update/1.0/relnotes/1.13.1008.34.html
_chromium=62.0.3202.94 # https://omahaproxy.appspot.com
pkgrel=1
pkgdesc='An advanced browser made with the power user in mind.'
groups=('browser')
url="https://vivaldi.com"
options=('!strip' '!zipman')
license=('custom' 'LGPL2.1')
arch=('x86_64')
depends=('gtk3' 'nss' 'libxtst' 'gconf' 'libxss' 'freetype2' 'ttf-font' 'nspr'
		'desktop-file-utils' 'shared-mime-info' 'alsa-lib' 'hicolor-icon-theme')
makedepends=(
	'w3m' 'libexif' 'libpulse' 'libxss' 'ninja' 'pciutils' 'python2' 'xdg-utils' 'nodejs'
	'opus' 'gperf' 'yasm' 'mesa' 'harfbuzz-icu' 'libwebp' 'libxslt' 'libxml2' 're2' 'minizip'
	'snappy' 'clang'
)
provides=('vivaldi-ffmpeg-codecs' 'vivaldi-widevine')
conflicts=('vivaldi-ffmpeg-codecs' 'vivaldi-widevine')
replaces=('vivaldi-ffmpeg-codecs' 'vivaldi-widevine')
noextract=('chrome.rpm')
_archgit_url='https://git.archlinux.org/svntogit/packages.git/plain/trunk'
source=(
	"https://downloads.vivaldi.com/stable/vivaldi-stable-${pkgver}-1.x86_64.rpm"
	"https://commondatastorage.googleapis.com/chromium-browser-official/chromium-$_chromium.tar.xz"
	"chrome.rpm::https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm"
	'chrome-eula_text.html::https://www.google.com/intl/en/chrome/browser/privacy/eula_text.html'
	"breakpad-use-ucontext_t.patch::${_archgit_url}/breakpad-use-ucontext_t.patch?h=packages/chromium"
	"crc32c-string-view-check.patch::${_archgit_url}/crc32c-string-view-check.patch?h=packages/chromium"
	"chromium-gn-bootstrap-r17.patch::${_archgit_url}/chromium-gn-bootstrap-r17.patch?h=packages/chromium"
)
md5sums=('90d0191a3837ce5c45c8743db88383c4'
         '98cf7b6eca255e2422f96094eccc1887'
         '2ce9a63d54ae18fdd096b7fc6206b872'
         'd50d8f0a6940791eabc41c4f64e6a3cf'
         '4dbc4cd98731f133a3f6e0f47625ad08'
         'd1359f1c4cc42c9f74a862361d736ef1'
         '1e9f37377b470e26dc0fa609c1cdad9e')

# Possible replacements are listed in build/linux/unbundle/replace_gn_files.py
# Keys are the names in the above script; values are the dependencies in Arch
declare -rgA _system_libs=(
  [flac]=flac
  #[freetype]=freetype2      # https://crbug.com/pdfium/733
  [harfbuzz-ng]=harfbuzz-icu
  #[icu]=icu                 # https://crbug.com/772655
  [libdrm]=
  [libjpeg]=libjpeg
  #[libpng]=libpng           # https://crbug.com/752403#c10
  #[libvpx]=libvpx           # https://bugs.gentoo.org/611394
  [libwebp]=libwebp
  [libxml]=libxml2
  [libxslt]=libxslt
  [opus]=opus
  [re2]=re2
  [snappy]=snappy
  [yasm]=
  [zlib]=minizip
)

prepare() {
	cd "$srcdir/chromium-$_chromium"

	# https://crbug.com/710701
	local _chrome_build_hash=$(
		curl -s https://chromium.googlesource.com/chromium/src.git/+/$pkgver?format=TEXT | base64 -d | grep -Po '^parent \K[0-9a-f]{40}$'
	)

	if [[ -z $_chrome_build_hash ]]; then
		error "Unable to fetch Chrome build hash."
		return 1
	fi

	echo "LASTCHANGE=$_chrome_build_hash-" >build/util/LASTCHANGE

	# Fix build with glibc 2.26
	patch -Np1 -i ../breakpad-use-ucontext_t.patch
	
	# Fix incorrect inclusion of <string_view> in modes other than >= C++17
	patch -Np1 -d third_party/crc32c/src <../crc32c-string-view-check.patch

	# Fixes from Gentoo
	patch -Np1 -i ../chromium-gn-bootstrap-r17.patch
	
	# Remove compiler flag not supported by our system clang
	sed -i '/"-Wno-enum-compare-switch",/d' build/config/compiler/BUILD.gn

	# Use Python 2
	find . -name '*.py' -exec sed -i -r 's|/usr/bin/python$|&2|g' {} +

	# There are still a lot of relative calls which need a workaround
	[[ -d "$srcdir/python2-path" ]] && rm -rf "$srcdir/python2-path"
	mkdir "$srcdir/python2-path"
	ln -s /usr/bin/python2 "$srcdir/python2-path/python"

	mkdir -p third_party/node/linux/node-linux-x64/bin
	ln -s /usr/bin/node third_party/node/linux/node-linux-x64/bin/

	# Remove bundled libraries for which we will use the system copies; this
	# *should* do what the remove_bundled_libraries.py script does, with the
	# added benefit of not having to list all the remaining libraries
	local _lib
	for _lib in ${!_system_libs[@]} ${_system_libs[libjpeg]+libjpeg_turbo}; do
	find -type f -path "*third_party/$_lib/*" \
		\! -path "*third_party/$_lib/chromium/*" \
		\! -path "*third_party/$_lib/google/*" \
		\! -path "*base/third_party/icu/*" \
		\! -regex '.*\.\(gn\|gni\|isolate\|py\)' \
		-delete
	done

	python2 build/linux/unbundle/replace_gn_files.py --system-libraries "${!_system_libs[@]}"
}

build() {
	cd "$srcdir/chromium-$_chromium"

	export PATH="$srcdir/python2-path:$PATH"
	export HOME="$srcdir"
	export TMPDIR="$srcdir/temp"
	mkdir -p "$TMPDIR"

	export CC=clang
	export CXX=clang++
	export AR=ar
	export NM=nm

	local args=(
		'clang_use_chrome_plugins=false'
		'fieldtrial_testing_like_official_build=true'
		'remove_webcore_debug_symbols=true'
		'ffmpeg_branding="Chrome"'
		'proprietary_codecs=true'
		'enable_hevc_demuxing=true'
		'link_pulseaudio=true'
		'use_gconf=false'
		'use_gio=false'
		'use_gnome_keyring=false'
		'use_kerberos=false'
		'use_cups=false'
		'use_sysroot=false'
		'use_gold=false'
		'linux_use_bundled_binutils=false'
		'use_gtk3=true'
		'use_custom_libcxx=false'
		'fatal_linker_warnings=false'
		'treat_warnings_as_errors=false'
		'is_clang=true'
		'custom_toolchain="//build/toolchain/linux/unbundle:default"'
		'host_toolchain="//build/toolchain/linux/unbundle:default"'
		'is_component_build=true'
		'is_debug=false'
		'symbol_level=0'
		'enable_nacl=false'
		'enable_swiftshader=false'
		'enable_nacl=false'
		'enable_widevine=true'
	)

	python2 tools/gn/bootstrap/bootstrap.py --gn-gen-args "${args[*]}"
	out/Release/gn gen out/Release --args="${args[*]}" --script-executable=/usr/bin/python2

	ninja -C out/Release -v media/ffmpeg
}


package() {
	cp -a {opt,usr} "${pkgdir}"

	# File conflicts with exo package
	rm "${pkgdir}/usr/share/xfce4/helpers/vivaldi.desktop"

	# suid sanbox
	chmod 4755 "${pkgdir}/opt/vivaldi/vivaldi-sandbox"

	# make /usr/bin/vivaldi available if its not there
	if [[ ! -e "$pkgdir/usr/bin/vivaldi-stable" ]]; then
		install -dm 755 "$pkgdir/usr/bin"
		ln -sf /opt/vivaldi/vivaldi "$pkgdir/usr/bin/vivaldi-stable"
	fi

	# install icons
	for res in 16 22 24 32 48 64 128 256; do
		install -Dm644 "${pkgdir}/opt/vivaldi/product_logo_${res}.png" \
		"${pkgdir}/usr/share/icons/hicolor/${res}x${res}/apps/vivaldi.png"
	done

	# license
	install -dm755 "$pkgdir/usr/share/licenses/$pkgname"
	strings "$pkgdir/opt/vivaldi/locales/en-US.pak" \
		| tr '\n' ' ' \
		| sed -rne 's/.*(<html lang.*>.*html>).*/\1/p' \
		| w3m -I 'utf-8' -T 'text/html' \
		> "$pkgdir/usr/share/licenses/$pkgname/eula.txt"

	# Install ffmpeg codec
	(cd "$srcdir/chromium-$_chromium" \
		&& install -Dm644 out/Release/libffmpeg.so "$pkgdir/opt/vivaldi/libffmpeg.so")

	# Extract and install widevine codec
	mkdir "${srcdir}/chrome" && cd "${srcdir}/chrome"
	bsdtar -xf ../chrome.rpm opt/google/chrome/libwidevinecdm.so

	# Copy to Vivaldi directory for now. We might add a symlink when package is installed (using alpm hook).
	unlink "${pkgdir}/opt/vivaldi/libwidevinecdm.so" || true
	cp opt/google/chrome/libwidevinecdm.so "${pkgdir}/opt/vivaldi"
	
	# Chrome license
	cp "${srcdir}/chrome-eula_text.html" "${pkgdir}/usr/share/licenses/${pkgname}"

	# ALPM Hooks
	mkdir -p "${pkgdir}/usr/share/libalpm"/{hooks,scripts}
	cp "${srcdir}"/../*.hook "${pkgdir}/usr/share/libalpm/hooks"
	install -Dm755 "${srcdir}"/../vivaldi-widevine-helper "${pkgdir}/usr/share/libalpm/scripts/vivaldi-widevine-helper"
}

